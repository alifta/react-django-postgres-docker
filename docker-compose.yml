services:

  # Database service
  db:
    # image: postgres:latest
    image: postgres:17.2-alpine3.21
    container_name: postgres_db
    # env_file:
    #   - .env
    ports:
      - 5432:5432
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=db
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=localdevpw
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "db", "-U", "user" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis service
  redis:
    image: redis:7.4.2-alpine
    container_name: redis_cache
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        - DEV=true
    container_name: django_backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/backend
      - dev-static-data:/vol/web
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=db
      - DB_USER=user
      - DB_PASS=localdevpw
      - DEBUG=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery service
  celery:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: celery_backend
    volumes:
      - ./backend:/backend
    command: >
      sh -c "celery -A backend worker --loglevel=info"
    depends_on:
      - db
      - redis
      - backend

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: react_frontend
    ports:
      - "5173:5173" # Vite's default port
    # volumes:
    #   - ./frontend:/frontend
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /frontend
          ignore:
            - node_modules
    # depends_on:
    #   - backend

    # Volumes
volumes:
  dev-db-data:
  dev-static-data:
